# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Homebrew 

on:
  # Triggered manually
  workflow_dispatch:
    inputs:
      tag:
        description: "Timely version"
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache pkg modules
        id: cache-pkg
        uses: actions/cache@v3
        env:
          cache-name: cache-pkg
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.pkg-cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install QEMU and ldid
        run: |
          # Install qemu
          sudo apt install qemu binfmt-support qemu-user-static
          # install ldid
          git clone https://github.com/daeken/ldid.git
          cd ./ldid
          ./make.sh
          sudo cp ./ldid /usr/local/bin
  



      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name : Install dependencies and build executables
        run: |
          npm i

          # Copy sqlite binaries
          rsync -rvzhP ./binaries/binding/ ./node_modules/sqlite3/lib/binding/


          # clean up code to optimize
          npx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**,sqlite3/**" --run


          # build executables
          npm run build



          # sudo chmod 777 dist/help-macos-arm64
          # ldid -S dist/help-macos-arm64

          # ls ./dist
          
          mkdir ./mac-dist
          mv ./dist/Noco-macos-arm64 ./mac-dist/
          mv ./dist/Noco-macos-x64 ./mac-dist/
          
      - name: Upload executables to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.NC_GITHUB_TOKEN }}
          file: dist/**
          tag: ${{ github.event.inputs.tag || inputs.tag }}
          overwrite: true
          file_glob: true
          repo_name: nocodb/nocodb-timely
          
          
          
          
      - uses: actions/upload-artifact@master
        with:
            name: executables
            path: mac-dist
          
  sign:
    runs-on: macos-latest
    needs: build
    steps:

        - uses: actions/download-artifact@master
          with:
            name: executables
            path: mac-dist

        - run: |
            /usr/bin/codesign --force -s - ./mac-dist/Noco-macos-arm64 -v
            /usr/bin/codesign --force -s - ./mac-dist/Noco-macos-x64 -v
        - uses: actions/upload-artifact@master
          with:
            name: executables
            path: mac-dist


  publish:
    needs: sign
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: executables
          path: mac-dist
      - name: Compress files
        run: |
          mv ./mac-dist/Noco-macos-x64 ./mac-dist/noco
          tar -czf ./mac-dist/noco.tar.gz ./mac-dist/noco
          echo "::set-output name=CHECKSUM::$(shasum -a 256 noco.tar.gz)"
        id: compress

      - name: print 
        run: |
          MY_STRING=$(cat << EOF
          class Getfilesize < Formula
            desc "Get Human Readable file size information. - CLI"
            homepage "https://github.com/bharathvaj-ganesan/getfilesize-cli"
            url "https://github.com/bharathvaj-ganesan/getfilesize-cli/releases/download/v1.0.1/getfilesize.tar.gz"
            sha256 "6c03100f5b1f8e61f5d49efab759a2efcdbcc4ac2677fcf98e7317ec660e6994"
            license "MIT"
            version "1.0.1"

            def install
              bin.install "getfilesize"
            end
          end
          EOF
          )
          echo "$MY_STRING"
          
          
